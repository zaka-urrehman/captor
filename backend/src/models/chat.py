"""
Chat session and message models.
"""
from datetime import datetime
from typing import Optional, List, TYPE_CHECKING, Any
from sqlmodel import SQLModel, Field, Relationship, Column
from sqlalchemy import JSON
from .base import BaseTable

if TYPE_CHECKING:
    from .agent import Agent
    from .data_schema import CollectedData


class ChatSessionBase(SQLModel):
    """Base chat session fields."""

    started_at: datetime = Field(default_factory=datetime.utcnow, nullable=False)
    ended_at: Optional[datetime] = Field(default=None, nullable=True)
    customer_name: Optional[str] = Field(default=None, max_length=255, nullable=True)
    customer_email: Optional[str] = Field(default=None, max_length=255, nullable=True)


class ChatSession(ChatSessionBase, BaseTable, table=True):
    """Chat session table for conversation instances between customer & agent."""

    __tablename__ = "chat_sessions"

    agent_id: int = Field(foreign_key="agents.id", nullable=False, index=True)

    # Relationships
    agent: "Agent" = Relationship(back_populates="chat_sessions")
    messages: List["Message"] = Relationship(back_populates="session")
    agent_outputs: List["AgentOutput"] = Relationship(back_populates="session")
    collected_data: List["CollectedData"] = Relationship(back_populates="session")


class ChatSessionCreate(ChatSessionBase):
    """Chat session creation schema."""

    agent_id: int


class ChatSessionRead(ChatSessionBase):
    """Chat session read schema."""

    id: int
    agent_id: int
    created_at: str
    updated_at: Optional[str] = None


class MessageBase(SQLModel):
    """Base message fields."""
    
    sender: str = Field(max_length=20, nullable=False)  # "customer" | "agent"
    receiver: str = Field(max_length=20, nullable=False)
    content: str = Field(nullable=False)


class Message(MessageBase, BaseTable, table=True):
    """Message table for conversation history."""
    
    __tablename__ = "messages"
    
    session_id: int = Field(foreign_key="chat_sessions.id", nullable=False, index=True)
    
    # Relationships
    session: "ChatSession" = Relationship(back_populates="messages")


class MessageCreate(MessageBase):
    """Message creation schema."""
    
    session_id: int


class MessageRead(MessageBase):
    """Message read schema."""
    
    id: int
    session_id: int
    created_at: str


class AgentOutputBase(SQLModel):
    """Base agent output fields."""
    
    data: dict = Field(default_factory=dict, sa_column=Column(JSON))


class AgentOutput(AgentOutputBase, BaseTable, table=True):
    """Agent output table for structured outputs generated by agent."""
    
    __tablename__ = "agent_outputs"
    
    session_id: int = Field(foreign_key="chat_sessions.id", nullable=False, index=True)
    
    # Relationships
    session: "ChatSession" = Relationship(back_populates="agent_outputs")


class AgentOutputCreate(AgentOutputBase):
    """Agent output creation schema."""
    
    session_id: int


class AgentOutputRead(AgentOutputBase):
    """Agent output read schema."""
    
    id: int
    session_id: int
    created_at: str
